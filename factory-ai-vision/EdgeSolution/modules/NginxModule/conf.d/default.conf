# WebSocket Proxy with Load Balancing
#
# Like the other examples, but there are three WS backends (ws1, ws2, ws3).
# Each client must always be forwarded to the same backend (e.g. when using
# HTTPS requests).

map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

upstream webmodule {
    # Note:
    # Cannot use ip_hash cause most of the labeler's public IP address are the same.
    hash $remote_addr$remote_port consistent;

    # Available backend servers
    server WebModule:8000;
}

upstream inferencemodule {
    # Note:
    # Cannot use ip_hash cause most of the labeler's public IP address are the same.
    hash $remote_addr$remote_port consistent;

    # Available backend servers
    server InferenceModule:5000;
}

server {

    # see simple-wss.conf or simple-ws.conf

    listen 8080;

    # server_name factory-ai.example.com;
    # ssl_certificate     /usr/share/nginx/ssl/cert_chain.crt;
    # ssl_certificate_key /usr/share/nginx/ssl/linkernetworks_ai.key;
    # ssl_session_timeout 5m;
    # ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;

    location /video_feed {
        proxy_pass http://inferencemodule;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location / {
        # switch access log off
        access_log off;
        error_log /var/log/nginx/error.log warn;

        # redirect all HTTP traffic to webmodule:8080
        proxy_pass http://webmodule;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # WebSocket support (nginx 1.4)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}
