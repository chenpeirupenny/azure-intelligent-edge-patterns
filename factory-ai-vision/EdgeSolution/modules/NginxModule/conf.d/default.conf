# WebSocket Proxy with Load Balancing
#
# Like the other examples, but there are three WS backends (ws1, ws2, ws3).
# Each client must always be forwarded to the same backend (e.g. when using
# HTTPS requests).

map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

upstream webmodule {
    # Note:
    # Cannot use ip_hash cause most of the labeler's public IP address are the same.
    hash $remote_addr$remote_port consistent;

    # Available backend servers
    server WebModule:8000;
}

upstream inferencemodule {
    # Note:
    # Cannot use ip_hash cause most of the labeler's public IP address are the same.
    hash $remote_addr$remote_port consistent;

    # Available backend servers
    server InferenceModule:5000;
}

server {

    # see simple-wss.conf or simple-ws.conf

    listen 8080;

    # server_name factory-ai.example.com;
    # ssl_certificate     /usr/share/nginx/ssl/cert_chain.crt;
    # ssl_certificate_key /usr/share/nginx/ssl/linkernetworks_ai.key;
    # ssl_session_timeout 5m;
    # ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;

    location /video_feed {
        proxy_pass http://inferencemodule;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location / {
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            #
            # Custom headers and headers various browsers *should* be OK with but aren't
            #
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            #
            # Tell client that this pre-flight info is valid for 20 days
            #
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        if ($request_method = 'POST') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
        }
        if ($request_method = 'GET') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
        }
        # switch access log off
        access_log off;
        error_log /var/log/nginx/error.log warn;

        # redirect all HTTP traffic to localhost:8080
        proxy_pass http://webmodule;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host:8080;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # WebSocket support (nginx 1.4)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Path rewriting
        rewrite /services/myservice/(.*) /$1 break;
        proxy_redirect off;
    }
}
