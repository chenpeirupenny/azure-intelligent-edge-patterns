# =========================================================
# Base
# =========================================================
FROM arm64v8/python:3.8

WORKDIR /app
ENV LANG en_US.UTF-8
ENV LANGUAGE=en_US.UTF-8
ARG SYSTEM_CORES=4

# =========================================================
# Install system packages
# =========================================================
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    git \
    wget \
    unzip \
    yasm \
    pkg-config \
    libtbb2 \
    libtbb-dev \
    libpq-dev \
    libprotobuf-dev \
    protobuf-compiler \
    libgeos-dev \
    unzip \
    && rm -rf /var/lib/apt/lists/*
# protobuf-compiler:   https://github.com/onnx/onnx#build-onnx-on-arm-64
# libprotobuf-dev:     https://github.com/onnx/onnx#build-onnx-on-arm-64
# libgeos-dev:         Shapely



# =========================================================
# Install Python package
# =========================================================
WORKDIR /app

RUN pip install --upgrade pip
RUN pip install wheel cython protobuf
COPY requirements/base.txt ./requirements/base.txt
RUN pip install $(cat ./requirements/base.txt | grep numpy)
RUN ["pip", "install", "-r", "requirements/base.txt"]

# =========================================================
# Install onnxruntime
# =========================================================
ARG ONNXRUNTIME_REPO="https://github.com/Microsoft/onnxruntime"
ARG ONNXRUNTIME_SERVER_BRANCH="rel-1.5.2"

WORKDIR /code

RUN git clone \
        --single-branch \
        --branch ${ONNXRUNTIME_SERVER_BRANCH} \
        --recursive ${ONNXRUNTIME_REPO} onnxruntime && \
    /bin/sh onnxruntime/dockerfiles/scripts/install_common_deps.sh && \
    cd onnxruntime && \
    /bin/sh ./build.sh \
        --use_openmp \
        --config Release \
        --build_wheel \
        --update \
        --build \
        --parallel \
        --cmake_extra_defines ONNXRUNTIME_VERSION=$(cat ./VERSION_NUMBER) && \
    pip install /code/onnxruntime/build/Linux/Release/dist/*.whl && \
    cd .. && \
    rm -rf onnxruntime

RUN python -c "import onnxruntime; print(onnxruntime.__version__)"

# =========================================================
# Install opencv
# =========================================================
ARG OPENCV_REPO="https://github.com/opencv/opencv.git"
ARG OPENCV_TAG="4.4.0"

WORKDIR /code

RUN apt-get update && \
    apt-get install -y\
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libgstreamer-plugins-base1.0-dev \
    libgstreamer1.0-dev \
    libgtk-3-dev \
    libpng-dev \
    libjpeg-dev \
    libopenexr-dev \
    libtiff-dev \
    libwebp-dev \
    && rm -rf /var/lib/apt/lists/*

RUN git clone --single-branch \
        --branch ${OPENCV_TAG} \
        --recursive ${OPENCV_REPO} \
        opencv && \
    cd opencv && \
    mkdir build && \
    cd build && \
    cmake ../ && \
    make -j${SYSTEM_CORES} && \
    make install && \
    cd /code && \
    rm -rf opencv

RUN ["python","-c", "\"import cv2;print(cv2.__version__)\""]

# =========================================================
# Copy Source Code
# =========================================================
COPY coco_classes.txt ./
COPY default_model default_model/
COPY default_model_6parts default_model_6parts/
COPY grpc_topology.json ./
COPY http_topology.json ./
COPY sample_video sample_video/
COPY scenario_models scenario_models/
RUN chmod 777 sample_video/video.mp4
RUN chmod 777 default_model

COPY api/__init__.py ./api/__init__.py
COPY api/models.py ./api/models.py
COPY arguments.py ./
COPY config.py ./
COPY exception_handler.py ./
COPY extension_pb2.py ./
COPY extension_pb2_grpc.py ./
COPY http_inference_engine.py ./
COPY img.png ./
COPY inference_engine.py ./
COPY inferencing_pb2.py ./
COPY invoke.py ./
COPY logging_conf/logging_config.py ./logging_conf/logging_config.py
COPY main.py ./
COPY media_pb2.py ./
COPY model_wrapper.py ./
COPY object_detection.py ./
COPY object_detection2.py ./
COPY onnxruntime_predict.py ./
COPY scenarios.py ./
COPY server.py ./
COPY shared_memory.py ./
COPY sort.py ./
COPY stream_manager.py ./
COPY streams.py ./
COPY tracker.py ./
COPY utility.py ./
COPY /videos/scenario1-counting-objects.mkv ./videos/
COPY /videos/scenario2-employ-safety.mkv ./videos/
COPY /videos/scenario3-defect-detection.mkv ./videos/

# =========================================================
# Run
# =========================================================
EXPOSE 5558
EXPOSE 5000

CMD [ "python3", "server.py", "-p", "44000"]
